# 1504. Count Submatrices With All Ones

from pprint import pprint
from typing import List


class Solution:
    def numSubmat(self, mat: List[List[int]]) -> int:
        def allOneMat(i, j, w, h, mem={}):
            if i == j and w == h == 1:
                return mat[j][i]

            if h == 1:
                return sum(mat[j][i:i+w]) == w

            if w == 1:
                return sum(sum(mat[k][i:i+1]) for k in range(j, j+h)) == h

            if (i, j, w, h) not in mem:
                for k in range(j, j+h):
                    if allOneMat(i, k, w, 1) == False:
                        mem[(i, j, w, h)] = False
                        break
                    else:
                        mem[(i, j, w, h)] = True

            return mem[(i, j, w, h)]

        c = 0
        for i in range(len(mat[0])):
            for j in range(len(mat)):
                for w in range(1, len(mat[0]) - i + 1):
                    for h in range(1, len(mat) - j + 1):
                        if allOneMat(i, j, w, h):
                            c += 1

        return c


def numSubmat(mat, i,j):
    '''
    Calculate the number of sub-matrices that contains the cell i, j
    '''
    mem = set()
    for x in range(i+1):
        for y in range(j+1):
            mem.add((x, y))

    for x in range(i, len(mat)):
        for y in range(j, len(mat[0])):
            mem.add((x, y))

    print(mem)
    return len(mem)


if __name__ == '__main__':
    # sol = Solution()
    mat = [[1, 0, 1],
           [1, 1, 0],
           [1, 1, 0]]
           
    # print(sol.numSubmat(mat))

    # mat = [[0, 1, 1, 0], [0, 1, 1, 1], [1, 1, 1, 0]]
    # print(sol.numSubmat(mat))

    # mat = [
    #     [0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0],
    #     [1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,1,1,0,1,1,1],
    #     [0,0,1,1,1,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1],
    #     [1,0,1,0,1,1,0,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1],
    #     [1,0,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,0],
    #     [1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,0,0,1],
    #     [1,0,1,0,1,0,1,0,1,1,1,1,1,0,0,0,1,0,1,0,0,1,0,1,1,0,0,0,1,0,1,1,1,1],
    #     [0,1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1],
    #     [1,0,1,0,1,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,0,1,0,1,1,1,1,1,1,0,1,1],
    #     [1,0,1,1,1,1,1,0,0,1,0,1,1,1,1,0,1,1,0,1,0,1,1,0,1,1,1,1,0,0,1,1,1,1],[1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,0,1,1,1],[1,0,1,1,1,1,1,0,1,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0],[1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1],[0,0,1,1,0,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1,1,1],[1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,0,1,1,0,0,1,0,1,1,0,1,1,1],[1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1],[1,0,1,0,1,1,1,1,0,0,1,1,1,0,0,1,1,1,0,1,0,1,1,1,0,1,1,1,1,0,1,1,0,1],[0,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,0,1,1,1,0,0,0,1,1,1,1,0,1],[0,0,1,0,1,1,0,1,1,1,1,1,0,1,0,0,0,1,0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0],[1,0,0,0,1,1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1],[1,1,1,0,0,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,0,1,0,1,1,0,1,0],[1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,1,0],[1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,1],[1,1,0,1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,1,0,1,0],[1,1,0,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,1,1,1,1],[0,1,1,0,1,1,1,1,1,1,0,0,0,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,0],[1,1,0,1,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,1,0,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1],[1,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1],[0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,0,1,1,1,0,0,1,1,1,0,1,0,1,1,0],[1,1,1,1,1,0,0,0,1,1,1,1,1,0,1,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,1,1,1,0],[1,1,1,0,1,1,1,0,0,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1],[1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,0,1,1,1,1,1,0,0,1,1,1],[1,1,1,1,1,1,1,1,0,0,1,0,1,1,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,1,0,1,1,0],[1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1],[1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,0,0,1,0],[1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1],[1,0,1,0,0,0,1,0,1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1],[0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1],[0,0,0,1,1,1,1,1,1,1,0,1,1,0,1,0,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0],[1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1],[1,1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,0,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,0,0,1,1,1],[1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1],[1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,0,0,1,1,1,1,1,1],[1,0,1,1,1,1,1,1,0,1,1,0,1,1,1,0,0,0,0,0,1,0,1,1,1,1,0,1,1,0,0,1,1,1]]
    # print(len(mat))
    # print(len(mat[0]))
    # print(sol.numSubmat(mat))

    print(numSubmat(mat, 0, 0))
